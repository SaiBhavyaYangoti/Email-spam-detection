# -*- coding: utf-8 -*-
"""email spam detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xnlBADsgTXqvWWJl7UI-mTHN1mAluZ6Z
"""

#importing libraries
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.compose import ColumnTransformer

#importing dataset
try:
    df = pd.read_csv('/content/drive/MyDrive/Datasets/spam_email.csv', encoding='utf-8')
except UnicodeDecodeError:
    # Try an alternative encoding if utf-8 fails
    df = pd.read_csv('/content/drive/MyDrive/Datasets/spam_email.csv', encoding='latin1')

#displaying dataset
df

#data preprocessing
#dropping unnecessary null columns
df = df.drop(columns=['Unnamed: 2', 'Unnamed: 3', 'Unnamed: 4'])
df.head()

#dropping null rows
df.dropna()

#displaying dataset after preprocessing
df.head()

#encoding spam as 0 and ham as 1
df['v1'] = df['v1'].map({'spam': 0, 'ham': 1})
df.head()

#separating features and target
X=df['v2']
y=df['v1']

#splitting training and testing data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#converting text into numericals using Vectorizer
feature_extraction = TfidfVectorizer(min_df=1, stop_words='english', lowercase=True)

# Fit and transform the training data, transform the test data
X_train_features = feature_extraction.fit_transform(X_train)
X_test_features = feature_extraction.transform(X_test)

print(X_train_features)

#training the model using logistic regression
model=LogisticRegression()
model.fit(X_train_features, y_train)

#accuracy on training data
prediction_on_training_data=model.predict(X_train_features)
train_accuracy=accuracy_score(y_train, prediction_on_training_data)
print("Accuracy on training data: ", train_accuracy)

#accuracy on testing data
y_pred=model.predict(X_test_features)
test_accuracy=accuracy_score(y_test, y_pred)
print("Accuracy on test data: ", test_accuracy)

#testing the model
input_mail=["You got a free offer of 10 lakh rupees. click on the link below..."]
input_mail_features=feature_extraction.transform(input_mail)
prediction=model.predict(input_mail_features)
print(prediction)
if(prediction[0]==1):
  print("Spam mail")
else:
  print("Not spam")

print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

import seaborn as sns
import matplotlib.pyplot as plt

#generating the confusion matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(4,4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Ham', 'Spam'], yticklabels=['Ham', 'Spam'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()